<?php
namespace App\Controller;

use Cake\Event\Event;
use Cake\Http\Response;


/**
 * Users Controller
 *
 * @property \App\Model\Table\UsersTable $Users
 *
 * @method \App\Model\Entity\User[]|\Cake\Datasource\ResultSetInterface paginate($object = null, array $settings = [])
 */
class UsersController extends AppController
{
    /**
     * Add method
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $user = $this->Users->newEntity();
        if ($this->request->is('post')) {
            $user = $this->Users->patchEntity($user, $this->request->getData());
            if ($this->Users->save($user)) {
                $this->Flash->success(__('The user has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The user could not be saved. Please, try again.'));
        }
        $releases = $this->Users->Releases->find('list', ['limit' => 200]);
        $this->set(compact('user', 'releases'));
    }

	public function beforeFilter(Event $event)
	{
		$this->Authentication->allowUnauthenticated(['login', 'logout', 'add']);

		return parent::beforeFilter($event); // TODO: Change the autogenerated stub
	}

	/**
     * Delete method
     *
     * @param string|null $id User id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null): ?Response
    {
        $this->request->allowMethod(['post', 'delete']);
        $user = $this->Users->get($id);
        if ($this->Users->delete($user)) {
            $this->Flash->success(__('The user has been deleted.'));
        } else {
            $this->Flash->error(__('The user could not be deleted. Please, try again.'));
        }

        return $this->redirect(['action' => 'index']);
    }

	/**
	 * Edit method
	 *
	 * @param string|null $id User id.
	 *
	 * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
	 * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
	 */
	public function edit($id = null): ?Response
	{
		$user = $this->Users->get($id,
			[
				'contain' => ['Releases']
			]);
		if ($this->request->is(['patch', 'post', 'put'])) {
			$user = $this->Users->patchEntity($user, $this->request->getData());
			if ($this->Users->save($user)) {
				$this->Flash->success(__('The user has been saved.'));

				return $this->redirect(['action' => 'index']);
			}
			$this->Flash->error(__('The user could not be saved. Please, try again.'));
		}
		$releases = $this->Users->Releases->find('list', ['limit' => 200]);
		$this->set(compact('user', 'releases'));
	}

	/**
	 * Index method
	 *
	 */
	public function index(): void
	{
		$users = $this->paginate($this->Users);

		$this->set(compact('users'));
	}

	public function login()
	{
		$result = $this->Authentication->getResult();
		$this->set('user', $result);

		// regardless of POST or GET, redirect if user is logged in
		if ($result->isValid()) {
			$redirect = $this->request->getQuery('redirect',
				['controller' => 'Pages', 'action' => 'display', 'home']);

			return $this->redirect($redirect);
		}

		// display error if user submitted and authentication failed
		if ($this->request->is(['post']) && !$result->isValid()) {
			$this->Flash->error('Invalid username or password');
		}
	}

	public function logout()
	{
		$this->Flash->success('You are now logged out.');

		$this->Authentication->logout();
		return $this->redirect($this->request->getQuery(
			'redirect',
			['controller' => 'Pages', 'action' => 'display', 'home']
		));
		/*
		*/
	}

	/**
	 * View method
	 *
	 * @param string|null $id User id.
	 *
	 * @return \Cake\Http\Response|void
	 * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
	 */
	public function view($id = null)
	{
		$user = $this->Users->get($id,
			[
				'contain' => [
					'Releases',
					'ForumPosts',
					'Invitations',
					'ReleaseComments',
					'UserDownloads',
					'UserExcludedCategories',
					'UserMovies',
					'UserRequests',
					'UserSeries'
				]
			]);

		$this->set('user', $user);
	}
}
